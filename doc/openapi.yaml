openapi: 3.0.1
info:
  title: Cash desk API
  description: This is a sample cash desk API
  contact:
    email: petrof91@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: payment
    description: Payment operations for your cash desk.
paths:
  /payments:
    post:
      tags:
        - payment
      summary: Register incoming payment to the system.
      operationId: addPayment
      requestBody:
        description: Payment object to be stored in the system.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/DuplicateOk'
        '201':
          $ref: '#/components/responses/Created'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/DuplicateConflict'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      security:
        - apiKey: []
#      x-codegen-request-body-name: body
    get:
      tags:
        - payment
      summary: Returns all payments registered in the system for given cash desk.
      operationId: getPayments
      parameters:
        - name: fromTime
          in: query
          description: Return only records that were uploaded after given date and time (inclusive). Information should be formatted according to RFC 3339.
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      security:
        - apiKey: []
  /payment/{paymentId}:
    get:
      tags:
        - payment
      summary: Retrieve payment by ID
      description: Returns a single payment.
      operationId: getPaymentById
      parameters:
        - name: paymentId
          in: path
          description: ID of the payment to be retrieved.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Payment found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      security:
        - api_key: []
components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of the payment. Client must generate UUID for each payment.
        dateTime:
          type: string
          format: date-time
          description: Date and time of the payment. Formatted according to RFC 3339.
        amount:
          type: string
          pattern: '^\d{1,10}(\.\d{1,3})?$'
          description: Decimal amount of the payment. Must be positive.
          example: "159.90"
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Currency code according to ISO 4217 format.
          example: "CZK"
      required:
        - id
        - dateTime
        - amount
        - currency
    ApiResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
  headers:
    location:
      schema:
        type: string
        description: URL of the entity.
        example: "https://endpoint/v1/payments/3fa85f64-5717-4562-b3fc-2c963f66afa6"
  responses:
    ServiceUnavailable:
      description: Service is unavailable.
    InternalError:
      description: Internal error of the system.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    ValidationError:
      description: Validation error. Further description is provided in the response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    NotFound:
      description: Requested resource not found.
    Unauthorized:
      description: "Authentication failure. Further description is provided in the response."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    DuplicateConflict:
      description: "Resource has been already created and given data don't match."
      headers:
        location:
          $ref: '#/components/headers/location'
    DuplicateOk:
      description: "Resource has been already created with the same data."
      headers:
        location:
          $ref: '#/components/headers/location'
    Created:
      description: "Resource was successfully added."
      headers:
        location:
          $ref: '#/components/headers/location'